//
// Created by TangXin on 2016/4/6.
//

#ifndef PROJECT_RBTREE_HPP
#define PROJECT_RBTREE_HPP

#include <iostream>

enum Color {
    RED, BLACK
};

template<class T,
        class Compare = std::less<T>()>
struct rb_node {
    static rb_node *nil;
    T value;
    rb_node *parent;
    rb_node *left;
    rb_node *right;
    Color color;

    rb_node(const T &t, rb_node *_parent, Color _color = BLACK)
            : value(t), parent(_parent), color(_color) { }

    rb_node *brother() {
        if (parent->left == this)
            return parent->right;
        return parent->left;
    }
};

template<class T,
        class Compare = std::less<T>()>
class RedBlackTree {
private:

public:
};


http://www.wisestudy.cn/opentech/apache-introduction.html
/*
**  mod_headerfilter.c -- Apache sample headerfilter module
**  [Autogenerated via ``apxs -n headerfilter -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory
**  by running:
**
**    $ apxs -c -i mod_headerfilter.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /headerfilter in as follows:
**
**    #   apache2.conf
**    LoadModule headerfilter_module modules/mod_headerfilter.so
**    <Location /headerfilter>
**    SetHandler headerfilter
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /headerfilter and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/headerfilter
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**
**    The sample page from mod_headerfilter.c
*/

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"
#include "apr.h"
#include "apr_tables.h"
#include "apr_buckets.h"
#include "ap_hooks.h"
#include <printf.h>
apr_status_t res_filter(ap_filter_t *f, apr_bucket_brigade *bb)
{
    printf("enter %s %d\n",__FUNCTION__,__LINE__);
    const char *res;
    if((res = apr_table_get(f->r->headers_out,"X-Frame-Options"))!=NULL)
        printf("x-frame-options is %s\n", res);
    apr_table_add(f->r->headers_out, "X-Frame-Options", "SAMEORIGIN");
    apr_table_setn(f->r->headers_out,"res","i am res");
    ap_remove_output_filter(f);
    return ap_pass_brigade(f->next,bb);
}

apr_status_t pro_filter(ap_filter_t *f, apr_bucket_brigade *bb)
{
    printf("enter %s %d\n",__FUNCTION__,__LINE__);
    const char *res;
    if((res = apr_table_get(f->r->headers_out,"X-Frame-Options"))!=NULL)
        printf("x-frame-options is %s\n", res);
    apr_table_setn(f->r->headers_out, "pro","i am pro");
    apr_table_setn(f->r->headers_out, "X-Frame-Options","ALL ALLOW");
    printf("url %s header %s\n", f->r->uri, f->r->handler);
   /* if(1)
    {
        const char *data;
        char *buf;
        char *p;
        int i=0;
        apr_size_t len;
        apr_bucket *e = APR_BRIGADE_FIRST(bb);
        while( e != APR_BRIGADE_SENTINEL(bb) )
        {
            printf("bucket name %s \n",e->type->name);
            if( APR_BUCKET_IS_EOS(e) )
            {
                e = APR_BUCKET_NEXT(e);
                 continue;
            }
                //read
            apr_bucket_read(e, &data, &len, APR_BLOCK_READ);
            if( (buf=strstr(data,"X-Frame-Option")) != NULL)
            {
                int l1 = buf-data;
                apr_bucket_split(e,l1);
                e = APR_BUCKET_NEXT(e);
                if( (p=strstr(buf,"\n")) != NULL )
                {
                    int l = p-buf+1;
                    apr_bucket_split(e,l);
                    APR_BUCKET_REMOVE(e);
                    break;
                }
            }
            e = APR_BUCKET_NEXT(e);
        }
    }*/
    ap_remove_output_filter(f);
    printf("leave function %s\n", __FUNCTION__);
    return ap_pass_brigade(f->next,bb);
}


apr_status_t con_filter(ap_filter_t *f, apr_bucket_brigade *bb)
{
    printf("enter %s %d\n",__FUNCTION__,__LINE__);
    const char *res;
    if((res = apr_table_get(f->r->headers_out,"X-Frame-Options"))!=NULL)
        printf("x-frame-options is %s\n", res);
    apr_table_setn(f->r->headers_out, "con","i am con");
    ap_remove_output_filter(f);
    return ap_pass_brigade(f->next,bb);
}
/* The sample content handler */

static void InsertFilter_res(request_rec *r)
{
    ap_add_output_filter("RES",NULL,r,r->connection);
}

static void InsertFilter_con(request_rec *r)
{
    ap_add_output_filter("CON",NULL,r,r->connection);
}

static void InsertFilter_pro(request_rec *r)
{
    ap_add_output_filter("PRO",NULL,r,r->connection);
}

static void headerfilter_register_hooks(apr_pool_t *p)
{
    ap_hook_insert_filter(InsertFilter_res,NULL,NULL,APR_HOOK_MIDDLE);
    ap_hook_insert_filter(InsertFilter_con,NULL,NULL,APR_HOOK_LAST);
    ap_hook_insert_filter(InsertFilter_pro,NULL,NULL,APR_HOOK_LAST);
    ap_register_output_filter("RES" ,res_filter, NULL, AP_FTYPE_RESOURCE);
    ap_register_output_filter("PRO", pro_filter, NULL, AP_FTYPE_PROTOCOL);
    ap_register_output_filter("CON", con_filter, NULL, AP_FTYPE_CONTENT_SET);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA headerfilter_module = {
    STANDARD20_MODULE_STUFF,
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    headerfilter_register_hooks  /* register hooks                      */
};

#endif //PROJECT_RBTREE_HPP
